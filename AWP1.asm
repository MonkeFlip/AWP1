; Listing generated by Microsoft (R) Optimizing Compiler Version 19.30.30709.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_09IOAHFIDM@?5seconds?4@			; `string'
PUBLIC	??_C@_0BJ@BFBCKOOG@Vectorized?5method?5time?3?5@ ; `string'
PUBLIC	??_C@_0BN@PCGHHCDK@Not?5vectorized?5method?5time?3?5@ ; `string'
PUBLIC	??_C@_0CC@MELAHBON@Manually?5vectorized?5method?5time@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	?x_matrix1@@3HA					; x_matrix1
PUBLIC	?y_matrix1@@3HA					; y_matrix1
EXTRN	__imp_?rdstate@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@M@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp__Query_perf_counter:PROC
EXTRN	__imp___std_terminate:PROC
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp__Query_perf_frequency:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp___CxxFrameHandler4:PROC
?x_matrix1@@3HA DD 0aH					; x_matrix1
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
	ORG $+3
?y_matrix1@@3HA DD 028H					; y_matrix1
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MELAHBON@Manually?5vectorized?5method?5time@
CONST	SEGMENT
??_C@_0CC@MELAHBON@Manually?5vectorized?5method?5time@ DB 'Manually vecto'
	DB	'rized method time: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PCGHHCDK@Not?5vectorized?5method?5time?3?5@
CONST	SEGMENT
??_C@_0BN@PCGHHCDK@Not?5vectorized?5method?5time?3?5@ DB 'Not vectorized '
	DB	'method time: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BFBCKOOG@Vectorized?5method?5time?3?5@
CONST	SEGMENT
??_C@_0BJ@BFBCKOOG@Vectorized?5method?5time?3?5@ DB 'Vectorized method ti'
	DB	'me: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOAHFIDM@?5seconds?4@
CONST	SEGMENT
??_C@_09IOAHFIDM@?5seconds?4@ DB ' seconds.', 00H	; `string'
CONST	ENDS
PUBLIC	??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
PUBLIC	?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z		; ClearMatrix
PUBLIC	?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z		; FillMatrix
PUBLIC	?NonVectorizedAdd@@YAXHHPEAPEAM0@Z		; NonVectorizedAdd
PUBLIC	?VectorizedAdd@@YAXHHPEAPEAM0@Z			; VectorizedAdd
PUBLIC	?ManualVectorization@@YAXHHHPEIAPEAM00@Z	; ManualVectorization
PUBLIC	?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z ; MultiplicationWithoutVectorization
PUBLIC	?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z ; MultiplicationWithVectorization
PUBLIC	main
PUBLIC	?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEBANXZ ; std::chrono::duration<double,std::ratio<1,1> >::count
PUBLIC	??$?0N$0A@@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEAA@AEBN@Z ; std::chrono::duration<double,std::ratio<1,1> >::duration<double,std::ratio<1,1> ><double,0>
PUBLIC	??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@$0A@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<double,std::ratio<1,1> >,__int64,std::ratio<1,1000000000>,0>
PUBLIC	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
PUBLIC	??$?0_J$0A@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,0>
PUBLIC	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
PUBLIC	?x_result@@3HA					; x_result
PUBLIC	?y_result@@3HA					; y_result
PUBLIC	?x_matrix2@@3HA					; x_matrix2
PUBLIC	?y_matrix2@@3HA					; y_matrix2
PUBLIC	__real@41cdcd6500000000
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__std_terminate:PROC
EXTRN	memset:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN4@endl
	DD	imagerel $LN4@endl+57
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN99@operator
	DD	imagerel $LN99@operator+452
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+59
	DD	imagerel $unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN8@Sentry_bas
	DD	imagerel $LN8@Sentry_bas+44
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN8@Sentry_bas
	DD	imagerel $LN8@Sentry_bas+36
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN24@sentry
	DD	imagerel $LN24@sentry+123
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN13@sentry
	DD	imagerel $LN13@sentry+62
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z DD imagerel $LN32
	DD	imagerel $LN32+146
	DD	imagerel $unwind$?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z DD imagerel $LN34
	DD	imagerel $LN34+145
	DD	imagerel $unwind$?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VectorizedAdd@@YAXHHPEAPEAM0@Z DD imagerel $LN38
	DD	imagerel $LN38+34
	DD	imagerel $unwind$?VectorizedAdd@@YAXHHPEAPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?VectorizedAdd@@YAXHHPEAPEAM0@Z DD imagerel $LN38+34
	DD	imagerel $LN38+390
	DD	imagerel $chain$0$?VectorizedAdd@@YAXHHPEAPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?VectorizedAdd@@YAXHHPEAPEAM0@Z DD imagerel $LN38+390
	DD	imagerel $LN38+403
	DD	imagerel $chain$1$?VectorizedAdd@@YAXHHPEAPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ManualVectorization@@YAXHHHPEIAPEAM00@Z DD imagerel $LN34
	DD	imagerel $LN34+241
	DD	imagerel $unwind$?ManualVectorization@@YAXHHHPEIAPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z DD imagerel $LN38
	DD	imagerel $LN38+330
	DD	imagerel $unwind$?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z DD imagerel $LN46
	DD	imagerel $LN46+514
	DD	imagerel $unwind$?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN508
	DD	imagerel $LN508+2878
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DD imagerel $LN9@now
	DD	imagerel $LN9@now+86
	DD	imagerel $unwind$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
pdata	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+09
?x_result@@3HA DD 028H					; x_result
?y_result@@3HA DD 028H					; y_result
?x_matrix2@@3HA DD 028H					; x_matrix2
?y_matrix2@@3HA DD 0aH					; y_matrix2
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DQ 00006340a00040a01r ; 8.62672e-309
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0a1d01H
	DD	07681dH
	DD	0f00cf213H
	DD	0d008e00aH
	DD	07004c006H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ManualVectorization@@YAXHHHPEIAPEAM00@Z DD 0b1a01H
	DD	07c41aH
	DD	06741aH
	DD	05641aH
	DD	04341aH
	DD	0e018f01aH
	DD	0d016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?VectorizedAdd@@YAXHHPEAPEAM0@Z DD 021H
	DD	imagerel $LN38
	DD	imagerel $LN38+34
	DD	imagerel $unwind$?VectorizedAdd@@YAXHHPEAPEAM0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?VectorizedAdd@@YAXHHPEAPEAM0@Z DD 020521H
	DD	027405H
	DD	imagerel $LN38
	DD	imagerel $LN38+34
	DD	imagerel $unwind$?VectorizedAdd@@YAXHHPEAPEAM0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VectorizedAdd@@YAXHHPEAPEAM0@Z DD 050c01H
	DD	04640cH
	DD	03340cH
	DD	0e00cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 03c002c04H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DW 0e02H
	DD	imagerel __std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DQ 03002320600020619r ; 1.96423e-77
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 04a005804H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DW 0c02H
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DQ 00007340f00040f11r ; 1.00175e-308
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DW 03602H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DQ 00000420400010419r ; 3.58617e-310
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DQ 03002320600020601r ; 1.96423e-77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DQ 05006320a00020a01r ; 3.21257e+77
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DQ 0ec06a8025000d60er ; -2.3835e+212
	DD	0280a4c04H
	DW	0300cH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DW 01102H
	DB	080H
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DW	057dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 06040402H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DW 0a0cH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DW	03a40H
	DD	imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	07e383040H
	DD	imagerel __std_terminate
	DB	02eH
	DD	imagerel __std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DQ 0000d341600081619r ; 1.83617e-308
	DQ	0c00ee010f0125216r		; -3.85941
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DQ 03002320600020601r ; 1.96423e-77
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
tv5100 = 48
tv5044 = 48
tv5042 = 56
tv5025 = 56
$T86 = 64
tv5024 = 72
t1$2$ = 72
tv5016 = 80
t1$3$ = 96
$T87 = 192
$T88 = 200
$T89 = 208
tv5046 = 216
tv5027 = 216
t1$1$ = 216
main	PROC						; COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 30
$LN508:
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
; Line 36
	mov	ecx, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+112], xmm6
	call	??_U@YAPEAX_K@Z				; operator new[]
; Line 37
	mov	ecx, 80					; 00000050H
	mov	r12, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
; Line 38
	mov	ecx, 80					; 00000050H
	mov	QWORD PTR $T88[rsp], rax
	mov	r13, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	r15d, 10
	mov	QWORD PTR $T87[rsp], rax
	mov	rsi, r12
	mov	QWORD PTR tv5016[rsp], r15
	sub	rsi, r13
	mov	r14, rax
	sub	r14, r13
	mov	rbx, r13
	mov	edi, r15d
	npad	7
$LL4@main:
; Line 43
	mov	ecx, 80					; 00000050H
	call	??_U@YAPEAX_K@Z				; operator new[]
; Line 44
	mov	ecx, 80					; 00000050H
	mov	QWORD PTR [rsi+rbx], rax
	call	??_U@YAPEAX_K@Z				; operator new[]
; Line 45
	mov	ecx, 80					; 00000050H
	mov	QWORD PTR [rbx], rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR [r14+rbx], rax
	lea	rbx, QWORD PTR [rbx+8]
	sub	rdi, 1
	jne	SHORT $LL4@main
; Line 49
	mov	rdi, r13
	mov	r13, -1
	npad	3
$LL7@main:
; Line 51
	xor	ebx, ebx
$LL10@main:
; Line 53
	mov	ecx, 320				; 00000140H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	rcx, QWORD PTR [rdi+rsi]
	mov	QWORD PTR [rbx+rcx], rax
; Line 54
	mov	eax, 8
	movsxd	rcx, DWORD PTR ?y_matrix2@@3HA		; y_matrix2
	mul	rcx
	cmovo	rax, r13
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	rcx, QWORD PTR [rdi]
	mov	QWORD PTR [rbx+rcx], rax
; Line 55
	mov	eax, 8
	movsxd	rcx, DWORD PTR ?y_result@@3HA		; y_result
	mul	rcx
	cmovo	rax, r13
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	rcx, QWORD PTR [rdi+r14]
	mov	QWORD PTR [rbx+rcx], rax
	add	rbx, 8
	cmp	rbx, 80					; 00000050H
	jl	SHORT $LL10@main
; Line 49
	add	rdi, 8
	sub	r15, 1
	jne	SHORT $LL7@main
; Line 59
	mov	r13, QWORD PTR $T88[rsp]
	mov	r15d, 10
	mov	r14d, r15d
	mov	rsi, r12
$LL13@main:
; Line 61
	xor	edi, edi
$LL16@main:
; Line 63
	xor	ebx, ebx
$LL19@main:
; Line 65
	mov	ecx, 40					; 00000028H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	rcx, QWORD PTR [rsi]
	mov	rdx, QWORD PTR [rdi+rcx]
	mov	QWORD PTR [rbx+rdx], rax
	add	rbx, 8
	cmp	rbx, 320				; 00000140H
	jl	SHORT $LL19@main
; Line 61
	add	rdi, 8
	cmp	rdi, 80					; 00000050H
	jl	SHORT $LL16@main
; Line 59
	add	rsi, 8
	sub	r14, 1
	jne	SHORT $LL13@main
; Line 70
	mov	eax, DWORD PTR ?y_matrix2@@3HA		; y_matrix2
	mov	r14, r13
$LL22@main:
; Line 72
	xor	esi, esi
$LL25@main:
; Line 74
	xor	edi, edi
	lea	r13, QWORD PTR [rdi-1]
	test	eax, eax
	jle	SHORT $LN23@main
	xor	ebx, ebx
	npad	14
$LL28@main:
; Line 76
	movsxd	rcx, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	mov	eax, 4
	mul	rcx
	cmovo	rax, r13
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	rcx, QWORD PTR [r14]
	lea	rbx, QWORD PTR [rbx+8]
	inc	edi
	mov	rdx, QWORD PTR [rsi+rcx]
	mov	QWORD PTR [rbx+rdx-8], rax
	mov	eax, DWORD PTR ?y_matrix2@@3HA		; y_matrix2
	cmp	edi, eax
	jl	SHORT $LL28@main
$LN23@main:
; Line 72
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL25@main
; Line 70
	add	r14, 8
	sub	r15, 1
	jne	SHORT $LL22@main
; Line 81
	mov	r14, QWORD PTR $T87[rsp]
	mov	r15d, 10
	mov	eax, DWORD PTR ?y_result@@3HA		; y_result
	npad	1
$LL31@main:
; Line 83
	xor	esi, esi
$LL34@main:
; Line 85
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN32@main
	xor	ebx, ebx
	npad	6
$LL37@main:
; Line 87
	movsxd	rcx, DWORD PTR ?x_result@@3HA		; x_result
	mov	eax, 4
	mul	rcx
	cmovo	rax, r13
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	rcx, QWORD PTR [r14]
	lea	rbx, QWORD PTR [rbx+8]
	inc	edi
	mov	rdx, QWORD PTR [rsi+rcx]
	mov	QWORD PTR [rbx+rdx-8], rax
	mov	eax, DWORD PTR ?y_result@@3HA		; y_result
	cmp	edi, eax
	jl	SHORT $LL37@main
$LN32@main:
; Line 83
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL34@main
; Line 81
	add	r14, 8
	sub	r15, 1
	jne	SHORT $LL31@main
; Line 92
	mov	ecx, 320				; 00000140H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	r13, rax
	mov	QWORD PTR $T89[rsp], rax
; Line 93
	xor	ebx, ebx
$LL40@main:
; Line 95
	mov	ecx, 160				; 000000a0H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR [r13+rbx*8], rax
	inc	rbx
	cmp	rbx, 40					; 00000028H
	jl	SHORT $LL40@main
; Line 262
	xor	r9d, r9d
; Line 263
	mov	esi, 10
	xor	edi, edi
	npad	12
$LL72@main:
	mov	r11, QWORD PTR [r12+rdi*8]
; Line 265
	mov	rbx, rsi
	npad	9
$LL75@main:
; Line 267
	mov	r8, QWORD PTR [r11]
	lea	edx, DWORD PTR [r9+2]
	mov	r10d, 40				; 00000028H
	npad	3
$LL78@main:
; Line 271
	mov	rcx, QWORD PTR [r8]
	lea	eax, DWORD PTR [rdx-1]
	movd	xmm1, eax
; Line 267
	lea	r8, QWORD PTR [r8+8]
; Line 271
	cvtdq2ps xmm1, xmm1
	lea	eax, DWORD PTR [rdx+1]
	movd	xmm0, r9d
	add	r9d, esi
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx], xmm0
	movss	DWORD PTR [rcx+4], xmm1
	movd	xmm1, eax
	lea	eax, DWORD PTR [rdx+2]
	cvtdq2ps xmm1, xmm1
	movd	xmm0, edx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+8], xmm0
	movss	DWORD PTR [rcx+12], xmm1
	movd	xmm0, eax
	lea	eax, DWORD PTR [rdx+3]
	cvtdq2ps xmm0, xmm0
	movd	xmm1, eax
	lea	eax, DWORD PTR [rdx+4]
	movss	DWORD PTR [rcx+16], xmm0
	cvtdq2ps xmm1, xmm1
	movd	xmm0, eax
	lea	eax, DWORD PTR [rdx+5]
	movss	DWORD PTR [rcx+20], xmm1
	cvtdq2ps xmm0, xmm0
	movd	xmm1, eax
	lea	eax, DWORD PTR [rdx+6]
	movss	DWORD PTR [rcx+24], xmm0
	cvtdq2ps xmm1, xmm1
	movd	xmm0, eax
	lea	eax, DWORD PTR [rdx+7]
	movss	DWORD PTR [rcx+28], xmm1
	add	edx, esi
	movd	xmm1, eax
	cvtdq2ps xmm0, xmm0
	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+32], xmm0
	movss	DWORD PTR [rcx+36], xmm1
	sub	r10, 1
	jne	$LL78@main
; Line 265
	add	r11, 8
	sub	rbx, 1
	jne	$LL75@main
; Line 263
	inc	rdi
	cmp	rdi, rsi
	jl	$LL72@main
; Line 269
	movsxd	r9, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	xor	edx, edx
	movsxd	r11, DWORD PTR ?y_matrix2@@3HA		; y_matrix2
	mov	rdi, rsi
	mov	rbx, QWORD PTR $T88[rsp]
	npad	5
$LL86@main:
; Line 265
	xor	r10d, r10d
$LL89@main:
; Line 267
	xor	r8d, r8d
	test	r11, r11
	jle	SHORT $LN87@main
	npad	5
$LL92@main:
; Line 269
	test	r9, r9
	jle	SHORT $LN90@main
; Line 271
	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax+r10]
	mov	rax, QWORD PTR [rcx+r8*8]
	mov	rcx, r9
$LL95@main:
	movd	xmm0, edx
; Line 269
	lea	rax, QWORD PTR [rax+4]
; Line 271
	cvtdq2ps xmm0, xmm0
	inc	edx
	movss	DWORD PTR [rax-4], xmm0
	sub	rcx, 1
	jne	SHORT $LL95@main
$LN90@main:
; Line 267
	inc	r8
	cmp	r8, r11
	jl	SHORT $LL92@main
$LN87@main:
; Line 265
	add	r10, 8
	cmp	r10, 80					; 00000050H
	jl	SHORT $LL89@main
; Line 263
	add	rbx, 8
	sub	rdi, 1
	jne	SHORT $LL86@main
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	call	QWORD PTR __imp__Query_perf_frequency
	mov	rdi, rax
; Line 692
	call	QWORD PTR __imp__Query_perf_counter
	mov	r14, QWORD PTR $T87[rsp]
	mov	r15, rsi
	mov	rcx, rax
; Line 700
	cdq
	idiv	rdi
	imul	rax, rdx, 1000000000			; 3b9aca00H
	cdq
	idiv	rdi
	mov	rbx, rax
	mov	rax, rcx
	cdq
	idiv	rdi
	imul	rcx, rax, 1000000000			; 3b9aca00H
; Line 701
	add	rbx, rcx
	sub	r12, r14
	mov	QWORD PTR t1$1$[rsp], rbx
	mov	rbx, QWORD PTR $T88[rsp]
; Line 691
	mov	QWORD PTR $T86[rsp], r12
$LL43@main:
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 112
	xor	esi, esi
	npad	12
$LL46@main:
; Line 114
	xor	edi, edi
$LL49@main:
; Line 116
	mov	rax, QWORD PTR [rdi+rbx]
	mov	r9, QWORD PTR [r12+r14]
	mov	QWORD PTR [rsp+40], r13
	mov	rax, QWORD PTR [rax+rsi]
	mov	r9, QWORD PTR [r9+rdi]
	mov	QWORD PTR [rsp+32], rax
	call	?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z ; MultiplicationWithVectorization
; Line 117
	mov	r9, QWORD PTR [r14]
	mov	r8, r13
	mov	r9, QWORD PTR [rsi+r9]
	call	?VectorizedAdd@@YAXHHPEAPEAM0@Z		; VectorizedAdd
	add	rdi, 8
	cmp	rdi, 80					; 00000050H
	jl	SHORT $LL49@main
; Line 112
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL46@main
; Line 110
	add	r14, 8
	sub	r15, 1
	jne	SHORT $LL43@main
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	call	QWORD PTR __imp__Query_perf_frequency
	mov	rdi, rax
; Line 692
	call	QWORD PTR __imp__Query_perf_counter
	mov	rcx, rax
	xorps	xmm6, xmm6
; Line 700
	cdq
	idiv	rdi
	imul	rax, rdx, 1000000000			; 3b9aca00H
	cdq
	idiv	rdi
	mov	r8, rax
	mov	rax, rcx
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 123
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 699
	cdq
	idiv	rdi
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 123
	lea	rdx, OFFSET FLAT:??_C@_0BJ@BFBCKOOG@Vectorized?5method?5time?3?5@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 699
	imul	rax, rax, 1000000000			; 3b9aca00H
; Line 701
	add	rax, r8
; Line 315
	sub	rax, QWORD PTR t1$1$[rsp]
; Line 466
	cvtsi2sd xmm6, rax
	divsd	xmm6, QWORD PTR __real@41cdcd6500000000
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 123
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	movaps	xmm1, xmm6
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_09IOAHFIDM@?5seconds?4@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
; Line 286
	movsxd	rdi, DWORD PTR ?x_result@@3HA		; x_result
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	mov	r12d, 10
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 286
	movsxd	r14, DWORD PTR ?y_result@@3HA		; y_result
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	mov	r15, QWORD PTR $T87[rsp]
	npad	8
$LL140@main:
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 282
	xor	esi, esi
$LL143@main:
; Line 284
	xor	ebx, ebx
	test	r14, r14
	jle	SHORT $LN141@main
	npad	7
$LL146@main:
; Line 286
	test	rdi, rdi
	jle	SHORT $LN144@main
; Line 288
	mov	rax, QWORD PTR [r15]
	mov	r8, rdi
	shl	r8, 2
	xor	edx, edx
	mov	rcx, QWORD PTR [rsi+rax]
	mov	rcx, QWORD PTR [rcx+rbx*8]
	call	memset
$LN144@main:
; Line 284
	inc	rbx
	cmp	rbx, r14
	jl	SHORT $LL146@main
$LN141@main:
; Line 282
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL143@main
; Line 280
	add	r15, 8
	sub	r12, 1
	jne	SHORT $LL140@main
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	call	QWORD PTR __imp__Query_perf_frequency
	mov	rdi, rax
; Line 692
	call	QWORD PTR __imp__Query_perf_counter
	mov	rcx, rax
	mov	QWORD PTR tv5042[rsp], 10
; Line 700
	cdq
	idiv	rdi
	imul	rax, rdx, 1000000000			; 3b9aca00H
	cdq
	idiv	rdi
	mov	rbx, rax
	mov	rax, rcx
	cdq
	idiv	rdi
	movsxd	rdi, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
; Line 699
	imul	rcx, rax, 1000000000			; 3b9aca00H
; Line 701
	add	rbx, rcx
	mov	QWORD PTR t1$2$[rsp], rbx
	mov	rbx, QWORD PTR $T87[rsp]
	npad	1
$LL52@main:
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 130
	xor	esi, esi
	mov	QWORD PTR tv5044[rsp], rsi
	npad	9
$LL55@main:
; Line 132
	xor	ecx, ecx
	mov	QWORD PTR tv5046[rsp], rcx
	npad	6
$LL58@main:
; Line 134
	mov	rax, QWORD PTR $T88[rsp]
	mov	r12d, 40				; 00000028H
	mov	rax, QWORD PTR [rcx+rax]
	mov	r15, QWORD PTR [rsi+rax]
	mov	rax, QWORD PTR $T86[rsp]
	mov	rax, QWORD PTR [rbx+rax]
	mov	r14, QWORD PTR [rcx+rax]
	sub	r13, r14
$LL160@main:
; Line 185
	mov	rsi, QWORD PTR [r14+r13]
; Line 186
	test	rdi, rdi
	jle	SHORT $LN163@main
; Line 185
	mov	r8, rdi
	xor	edx, edx
	shl	r8, 2
	mov	rcx, rsi
	call	memset
$LN163@main:
; Line 188
	mov	r10, QWORD PTR [r14]
	xor	r9d, r9d
	npad	10
$LL166@main:
; Line 190
	mov	rax, QWORD PTR [r15+r9*8]
; Line 193
	xor	r8d, r8d
	movss	xmm2, DWORD PTR [r10]
	sub	rax, rsi
	cmp	rdi, 4
	jl	SHORT $LC449@main
; Line 190
	lea	rdx, QWORD PTR [rdi-4]
	shr	rdx, 2
	lea	rcx, QWORD PTR [rsi+4]
	inc	rdx
	lea	r8, QWORD PTR [rdx*4]
	npad	4
; Line 193
$LL450@main:
; Line 194
	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax-4]
	addss	xmm0, DWORD PTR [rcx-4]
	movss	DWORD PTR [rcx-4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rcx+4], xmm0
	mulss	xmm1, DWORD PTR [rcx+rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [rcx+8], xmm1
	add	rcx, 16
	sub	rdx, 1
	jne	SHORT $LL450@main
$LC449@main:
; Line 193
	cmp	r8, rdi
	jge	SHORT $LN164@main
	mov	rdx, rdi
	lea	rcx, QWORD PTR [rsi+r8*4]
	sub	rdx, r8
$LC169@main:
; Line 194
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rax+rcx]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rcx], xmm0
	add	rcx, 4
	sub	rdx, 1
	jne	SHORT $LC169@main
$LN164@main:
; Line 188
	inc	r9
	add	r10, 4
	cmp	r9, 10
	jl	$LL166@main
; Line 183
	add	r14, 8
	sub	r12, 1
	jne	$LL160@main
; Line 135
	mov	r9, QWORD PTR [rbx]
	mov	rsi, QWORD PTR tv5044[rsp]
	mov	r13, QWORD PTR $T89[rsp]
	mov	r8, r13
	mov	r9, QWORD PTR [r9+rsi]
	call	?NonVectorizedAdd@@YAXHHPEAPEAM0@Z	; NonVectorizedAdd
	mov	rcx, QWORD PTR tv5046[rsp]
	add	rcx, 8
	mov	QWORD PTR tv5046[rsp], rcx
	cmp	rcx, 80					; 00000050H
	jl	$LL58@main
; Line 130
	add	rsi, 8
	mov	QWORD PTR tv5044[rsp], rsi
	cmp	rsi, 80					; 00000050H
	jl	$LL55@main
; Line 128
	add	rbx, 8
	sub	QWORD PTR tv5042[rsp], 1
	jne	$LL52@main
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	call	QWORD PTR __imp__Query_perf_frequency
	mov	rdi, rax
; Line 692
	call	QWORD PTR __imp__Query_perf_counter
	mov	rcx, rax
	xorps	xmm6, xmm6
; Line 700
	cdq
	idiv	rdi
	imul	rax, rdx, 1000000000			; 3b9aca00H
	cdq
	idiv	rdi
	mov	r8, rax
	mov	rax, rcx
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 141
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 699
	cdq
	idiv	rdi
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 141
	lea	rdx, OFFSET FLAT:??_C@_0BN@PCGHHCDK@Not?5vectorized?5method?5time?3?5@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 699
	imul	rax, rax, 1000000000			; 3b9aca00H
; Line 701
	add	rax, r8
; Line 315
	sub	rax, QWORD PTR t1$2$[rsp]
; Line 466
	cvtsi2sd xmm6, rax
	divsd	xmm6, QWORD PTR __real@41cdcd6500000000
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 141
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	movaps	xmm1, xmm6
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_09IOAHFIDM@?5seconds?4@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	mov	r13, QWORD PTR $T87[rsp]
	mov	r12d, 10
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 286
	movsxd	rdi, DWORD PTR ?x_result@@3HA		; x_result
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	mov	r15, r13
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 286
	movsxd	r14, DWORD PTR ?y_result@@3HA		; y_result
$LL208@main:
; Line 282
	xor	esi, esi
$LL211@main:
; Line 284
	xor	ebx, ebx
	test	r14, r14
	jle	SHORT $LN209@main
	npad	5
$LL214@main:
; Line 286
	test	rdi, rdi
	jle	SHORT $LN212@main
; Line 288
	mov	rax, QWORD PTR [r15]
	mov	r8, rdi
	shl	r8, 2
	xor	edx, edx
	mov	rcx, QWORD PTR [rsi+rax]
	mov	rcx, QWORD PTR [rcx+rbx*8]
	call	memset
$LN212@main:
; Line 284
	inc	rbx
	cmp	rbx, r14
	jl	SHORT $LL214@main
$LN209@main:
; Line 282
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL211@main
; Line 280
	add	r15, 8
	sub	r12, 1
	jne	SHORT $LL208@main
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	call	QWORD PTR __imp__Query_perf_frequency
	mov	rdi, rax
; Line 692
	call	QWORD PTR __imp__Query_perf_counter
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 152
	mov	r14d, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 692
	mov	rcx, rax
; Line 700
	cdq
	mov	QWORD PTR tv5100[rsp], r13
	idiv	rdi
	mov	QWORD PTR tv5024[rsp], 10
	imul	rax, rdx, 1000000000			; 3b9aca00H
	cdq
	idiv	rdi
	mov	rbx, rax
	mov	rax, rcx
	cdq
	idiv	rdi
	mov	rdi, r13
	imul	rcx, rax, 1000000000			; 3b9aca00H
; Line 701
	add	rbx, rcx
	mov	QWORD PTR t1$3$[rsp], rbx
	npad	1
$LL61@main:
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 148
	xor	ebx, ebx
	mov	QWORD PTR tv5025[rsp], rbx
	npad	9
$LL64@main:
; Line 150
	xor	r13d, r13d
	mov	QWORD PTR tv5027[rsp], r13
	npad	5
$LL67@main:
; Line 152
	mov	rax, QWORD PTR $T88[rsp]
	mov	r15d, 40				; 00000028H
	mov	r12, QWORD PTR $T89[rsp]
	mov	rax, QWORD PTR [rax+r13]
	mov	rcx, QWORD PTR [rbx+rax]
	mov	rax, QWORD PTR $T86[rsp]
	mov	rax, QWORD PTR [rax+rdi]
	mov	rsi, QWORD PTR [rax+r13]
	mov	r13, rcx
	sub	r12, rsi
$LL228@main:
; Line 203
	mov	rdi, QWORD PTR [r12+rsi]
	lea	r11d, DWORD PTR [r14-1]
	shr	r11d, 3
; Line 204
	test	r14d, r14d
	jle	SHORT $LN504@main
	vxorps	xmm0, xmm0, xmm0
; Line 203
	mov	rcx, rdi
	lea	edx, DWORD PTR [r11+1]
	npad	3
$LL231@main:
; Line 205
	vmovups	YMMWORD PTR [rcx], ymm0
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL231@main
	vzeroupper
$LN504@main:
; Line 206
	xor	edx, edx
	mov	r9, r13
	npad	10
$LL234@main:
; Line 209
	mov	rax, QWORD PTR [rsi]
	mov	r8, QWORD PTR [r9]
	vbroadcastss ymm2, DWORD PTR [rdx+rax]
; Line 210
	test	r14d, r14d
	jle	SHORT $LN232@main
; Line 208
	mov	rcx, rdi
	lea	r10d, DWORD PTR [r11+1]
	sub	r8, rdi
	npad	5
$LL237@main:
; Line 212
	vmovups	ymm1, YMMWORD PTR [rcx]
	vfmadd231ps ymm1, ymm2, YMMWORD PTR [r8+rcx]
	vmovups	YMMWORD PTR [rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	r10, 1
	jne	SHORT $LL237@main
$LN232@main:
; Line 206
	add	r9, 8
	add	rdx, 4
	cmp	rdx, 40					; 00000028H
	jl	SHORT $LL234@main
; Line 201
	add	rsi, 8
	sub	r15, 1
	vzeroupper
	jne	$LL228@main
; Line 153
	mov	rdi, QWORD PTR tv5100[rsp]
	mov	rbx, QWORD PTR tv5025[rsp]
	mov	r8, QWORD PTR $T89[rsp]
	mov	r9, QWORD PTR [rdi]
	mov	r9, QWORD PTR [r9+rbx]
	call	?NonVectorizedAdd@@YAXHHPEAPEAM0@Z	; NonVectorizedAdd
	mov	r13, QWORD PTR tv5027[rsp]
	add	r13, 8
	mov	QWORD PTR tv5027[rsp], r13
	cmp	r13, 80					; 00000050H
	jl	$LL67@main
; Line 148
	add	rbx, 8
	mov	QWORD PTR tv5025[rsp], rbx
	cmp	rbx, 80					; 00000050H
	jl	$LL64@main
; Line 146
	add	rdi, 8
	sub	QWORD PTR tv5024[rsp], 1
	mov	QWORD PTR tv5100[rsp], rdi
	jne	$LL61@main
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 691
	call	QWORD PTR __imp__Query_perf_frequency
	mov	rdi, rax
; Line 692
	call	QWORD PTR __imp__Query_perf_counter
	mov	rcx, rax
	xorps	xmm6, xmm6
; Line 700
	cdq
	idiv	rdi
	imul	rax, rdx, 1000000000			; 3b9aca00H
	cdq
	idiv	rdi
	mov	r8, rax
	mov	rax, rcx
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 159
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 699
	cdq
	idiv	rdi
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 159
	lea	rdx, OFFSET FLAT:??_C@_0CC@MELAHBON@Manually?5vectorized?5method?5time@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\chrono
; Line 699
	imul	rax, rax, 1000000000			; 3b9aca00H
; Line 701
	add	rax, r8
; Line 315
	sub	rax, QWORD PTR t1$3$[rsp]
; Line 466
	cvtsi2sd xmm6, rax
	divsd	xmm6, QWORD PTR __real@41cdcd6500000000
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 159
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	movaps	xmm1, xmm6
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_09IOAHFIDM@?5seconds?4@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
	mov	rax, QWORD PTR $T87[rsp]
; Line 286
	movsxd	rdi, DWORD PTR ?x_result@@3HA		; x_result
	movsxd	r14, DWORD PTR ?y_result@@3HA		; y_result
	npad	4
$LL276@main:
; Line 282
	xor	esi, esi
$LL279@main:
; Line 284
	xor	ebx, ebx
	test	r14, r14
	jle	SHORT $LN277@main
	npad	7
$LL282@main:
; Line 286
	test	rdi, rdi
	jle	SHORT $LN280@main
; Line 288
	mov	rax, QWORD PTR [rax]
	mov	r8, rdi
	shl	r8, 2
	xor	edx, edx
	mov	rcx, QWORD PTR [rax+rsi]
	mov	rcx, QWORD PTR [rcx+rbx*8]
	call	memset
$LN280@main:
; Line 284
	mov	rax, QWORD PTR $T87[rsp]
	inc	rbx
	cmp	rbx, r14
	jl	SHORT $LL282@main
$LN277@main:
; Line 282
	mov	rax, QWORD PTR $T87[rsp]
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL279@main
; Line 280
	add	rax, 8
	sub	QWORD PTR tv5016[rsp], 1
	mov	QWORD PTR $T87[rsp], rax
	jne	SHORT $LL276@main
; Line 162
	movaps	xmm6, XMMWORD PTR [rsp+112]
	xor	eax, eax
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z
_TEXT	SEGMENT
M$dead$ = 64
N$dead$ = 72
K$dead$ = 80
A$ = 88
B$ = 96
C$ = 104
?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z PROC ; MultiplicationWithVectorization, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 165
$LN46:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	movsxd	rsi, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	mov	r14, r9
; Line 175
	mov	r12, QWORD PTR C$[rsp]
	mov	rbx, rsi
	mov	r15, QWORD PTR B$[rsp]
	sub	r12, r9
	mov	ebp, 40					; 00000028H
	npad	3
$LL4@Multiplica:
; Line 169
	mov	rdi, QWORD PTR [r12+r14]
	test	esi, esi
	jle	SHORT $LN6@Multiplica
; Line 168
	mov	r8, rbx
	xor	edx, edx
	shl	r8, 2
	mov	rcx, rdi
	call	memset
$LN6@Multiplica:
; Line 171
	mov	r11, QWORD PTR [r14]
	xor	r9d, r9d
	npad	1
$LL10@Multiplica:
; Line 174
	movss	xmm3, DWORD PTR [r11]
	xor	edx, edx
	mov	r8, QWORD PTR [r15+r9*8]
	movaps	xmm4, xmm3
	shufps	xmm4, xmm4, 0
; Line 175
	test	esi, esi
	jle	$LN24@Multiplica
	cmp	esi, 16
	jb	$LN24@Multiplica
; Line 173
	lea	eax, DWORD PTR [rsi-1]
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r8+rcx*4]
	lea	r10, QWORD PTR [rdi+rcx*4]
	cmp	rdi, rax
	ja	SHORT $LN25@Multiplica
	cmp	r10, r8
	jae	$LN24@Multiplica
$LN25@Multiplica:
	mov	ecx, esi
	and	ecx, -2147483633			; ffffffff8000000fH
	jge	SHORT $LN44@Multiplica
	dec	ecx
	or	ecx, -16
	inc	ecx
$LN44@Multiplica:
	mov	eax, esi
	sub	eax, ecx
	mov	rcx, r8
; Line 175
	movsxd	r10, eax
	sub	rcx, rdi
	lea	rax, QWORD PTR [rdi+16]
$LL13@Multiplica:
; Line 176
	movups	xmm0, XMMWORD PTR [rax-16]
	add	rdx, 16
	movups	xmm1, XMMWORD PTR [rcx+rax-16]
	movups	xmm2, XMMWORD PTR [rax+rcx]
	mulps	xmm1, xmm4
	mulps	xmm2, xmm4
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rax-16], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	xmm1, XMMWORD PTR [rcx+rax+16]
	addps	xmm2, xmm0
	mulps	xmm1, xmm4
	movups	XMMWORD PTR [rax], xmm2
	movups	xmm0, XMMWORD PTR [rax+16]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	xmm1, XMMWORD PTR [rcx+rax+32]
	mulps	xmm1, xmm4
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rax+32], xmm1
	add	rax, 64					; 00000040H
	cmp	rdx, r10
	jl	SHORT $LL13@Multiplica
$LN24@Multiplica:
; Line 175
	cmp	rdx, rbx
	jge	$LN8@Multiplica
	mov	rax, rbx
	sub	r8, rdi
	sub	rax, rdx
	cmp	rax, 4
	jl	SHORT $LC35@Multiplica
	lea	rcx, QWORD PTR [rdx+1]
	lea	rcx, QWORD PTR [rdi+rcx*4]
	npad	9
$LL36@Multiplica:
; Line 176
	movaps	xmm0, xmm3
	lea	rax, QWORD PTR [rsi-3]
	mulss	xmm0, DWORD PTR [r8+rcx-4]
	movaps	xmm1, xmm3
	add	rdx, 4
	addss	xmm0, DWORD PTR [rcx-4]
	movss	DWORD PTR [rcx-4], xmm0
	movaps	xmm0, xmm3
	mulss	xmm1, DWORD PTR [r8+rcx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [rcx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR [r8+rcx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rcx+4], xmm0
	mulss	xmm1, DWORD PTR [r8+rcx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [rcx+8], xmm1
	add	rcx, 16
	cmp	rdx, rax
	jl	SHORT $LL36@Multiplica
$LC35@Multiplica:
; Line 175
	cmp	rdx, rbx
	jge	SHORT $LN8@Multiplica
	lea	rax, QWORD PTR [rdi+rdx*4]
$LC23@Multiplica:
; Line 176
	movaps	xmm0, xmm3
	inc	rdx
	mulss	xmm0, DWORD PTR [r8+rax]
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rax], xmm0
	add	rax, 4
	cmp	rdx, rbx
	jl	SHORT $LC23@Multiplica
$LN8@Multiplica:
; Line 171
	inc	r9
	add	r11, 4
	cmp	r9, 10
	jl	$LL10@Multiplica
; Line 166
	add	r14, 8
	sub	rbp, 1
	jne	$LL4@Multiplica
; Line 179
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
?MultiplicationWithVectorization@@YAXHHHPEIAPEAM00@Z ENDP ; MultiplicationWithVectorization
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z
_TEXT	SEGMENT
M$dead$ = 64
N$dead$ = 72
K$dead$ = 80
A$ = 88
B$ = 96
C$ = 104
?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z PROC ; MultiplicationWithoutVectorization, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 182
$LN38:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	movsxd	r12, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	mov	rsi, r9
; Line 193
	mov	r15, QWORD PTR C$[rsp]
	mov	rbx, r12
	mov	r14, QWORD PTR B$[rsp]
	sub	r15, r9
	mov	ebp, 40					; 00000028H
	npad	3
$LL4@Multiplica:
; Line 186
	mov	rdi, QWORD PTR [r15+rsi]
	test	r12d, r12d
	jle	SHORT $LN6@Multiplica
; Line 185
	mov	r8, rbx
	xor	edx, edx
	shl	r8, 2
	mov	rcx, rdi
	call	memset
$LN6@Multiplica:
; Line 188
	mov	r10, QWORD PTR [rsi]
	xor	r9d, r9d
$LL10@Multiplica:
; Line 190
	mov	rdx, QWORD PTR [r14+r9*8]
	xor	ecx, ecx
; Line 191
	movss	xmm2, DWORD PTR [r10]
; Line 193
	sub	rdx, rdi
	cmp	rbx, 4
	jl	SHORT $LC28@Multiplica
; Line 190
	lea	r8, QWORD PTR [rdi+4]
	npad	8
; Line 193
$LL29@Multiplica:
; Line 194
	movaps	xmm0, xmm2
	lea	rax, QWORD PTR [r12-3]
	mulss	xmm0, DWORD PTR [rdx+r8-4]
	movaps	xmm1, xmm2
	add	rcx, 4
	addss	xmm0, DWORD PTR [r8-4]
	movss	DWORD PTR [r8-4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [r8+rdx]
	addss	xmm1, DWORD PTR [r8]
	movss	DWORD PTR [r8], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rdx+r8+4]
	addss	xmm0, DWORD PTR [r8+4]
	movss	DWORD PTR [r8+4], xmm0
	mulss	xmm1, DWORD PTR [rdx+r8+8]
	addss	xmm1, DWORD PTR [r8+8]
	movss	DWORD PTR [r8+8], xmm1
	add	r8, 16
	cmp	rcx, rax
	jl	SHORT $LL29@Multiplica
$LC28@Multiplica:
; Line 193
	cmp	rcx, rbx
	jge	SHORT $LN8@Multiplica
	lea	rax, QWORD PTR [rdi+rcx*4]
$LC13@Multiplica:
; Line 194
	movaps	xmm0, xmm2
	inc	rcx
	mulss	xmm0, DWORD PTR [rax+rdx]
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rax], xmm0
	add	rax, 4
	cmp	rcx, rbx
	jl	SHORT $LC13@Multiplica
$LN8@Multiplica:
; Line 188
	inc	r9
	add	r10, 4
	cmp	r9, 10
	jl	$LL10@Multiplica
; Line 183
	add	rsi, 8
	sub	rbp, 1
	jne	$LL4@Multiplica
; Line 197
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
?MultiplicationWithoutVectorization@@YAXHHHPEAPEAM00@Z ENDP ; MultiplicationWithoutVectorization
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?ManualVectorization@@YAXHHHPEIAPEAM00@Z
_TEXT	SEGMENT
M$dead$ = 32
N$dead$ = 40
K$dead$ = 48
A$ = 56
B$ = 64
C$ = 72
?ManualVectorization@@YAXHHHPEIAPEAM00@Z PROC		; ManualVectorization, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 200
$LN34:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r12
	push	r13
	push	r14
	push	r15
	mov	r12, QWORD PTR C$[rsp]
	mov	rsi, r9
	mov	edi, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	sub	r12, r9
	mov	r14, QWORD PTR B$[rsp]
	mov	r15d, 40				; 00000028H
	npad	10
$LL4@ManualVect:
; Line 203
	mov	rbx, QWORD PTR [r12+rsi]
	lea	r11d, DWORD PTR [rdi-1]
	shr	r11d, 3
; Line 204
	test	edi, edi
	jle	SHORT $LN32@ManualVect
; Line 203
	vxorps	xmm0, xmm0, xmm0
	mov	rcx, rbx
	lea	edx, DWORD PTR [r11+1]
	npad	5
$LL7@ManualVect:
; Line 205
	vmovups	YMMWORD PTR [rcx], ymm0
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL7@ManualVect
	vzeroupper
$LN32@ManualVect:
; Line 206
	mov	r10, QWORD PTR [rsi]
	xor	edx, edx
	npad	10
$LL10@ManualVect:
; Line 208
	mov	r8, QWORD PTR [r14+rdx*8]
; Line 209
	vbroadcastss ymm2, DWORD PTR [r10]
; Line 210
	test	edi, edi
	jle	SHORT $LN8@ManualVect
; Line 208
	mov	rcx, rbx
	lea	r9d, DWORD PTR [r11+1]
	sub	r8, rbx
	npad	9
$LL13@ManualVect:
; Line 212
	vmovups	ymm1, YMMWORD PTR [rcx]
	vfmadd231ps ymm1, ymm2, YMMWORD PTR [r8+rcx]
	vmovups	YMMWORD PTR [rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	r9, 1
	jne	SHORT $LL13@ManualVect
$LN8@ManualVect:
; Line 206
	inc	rdx
	add	r10, 4
	cmp	rdx, 10
	jl	SHORT $LL10@ManualVect
; Line 201
	add	rsi, 8
	sub	r15, 1
	vzeroupper
	jne	$LL4@ManualVect
; Line 217
	mov	rbx, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+40]
	mov	rdi, QWORD PTR [rsp+48]
	mov	r12, QWORD PTR [rsp+56]
	pop	r15
	pop	r14
	pop	r13
	ret	0
?ManualVectorization@@YAXHHHPEIAPEAM00@Z ENDP		; ManualVectorization
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?VectorizedAdd@@YAXHHPEAPEAM0@Z
_TEXT	SEGMENT
x_matrix$dead$ = 16
y_matrix$dead$ = 24
matrixToAdd$ = 32
result$ = 40
?VectorizedAdd@@YAXHHPEAPEAM0@Z PROC			; VectorizedAdd, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 220
$LN38:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	r14
; Line 221
	movsxd	rsi, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	mov	rbx, r9
	mov	r14, r8
	test	rsi, rsi
	jle	$LN3@Vectorized
	mov	QWORD PTR [rsp+16], rdi
	sub	r14, rbx
	npad	6
$LL4@Vectorized:
; Line 225
	mov	r10, QWORD PTR [rbx]
	lea	r9, QWORD PTR [r14+rbx]
	mov	rdx, QWORD PTR [r9]
	lea	rcx, QWORD PTR [r10+156]
	lea	rax, QWORD PTR [rdx+156]
	cmp	r10, rax
	ja	SHORT $LN15@Vectorized
; Line 223
	cmp	rcx, rdx
	jb	SHORT $LN15@Vectorized
	xor	r11d, r11d
	jmp	SHORT $LN36@Vectorized
$LN15@Vectorized:
	mov	edi, 2
	lea	rcx, QWORD PTR [r10+32]
	mov	r8, r10
	neg	r8
	lea	r11d, QWORD PTR [rdi+30]
	npad	6
$LL7@Vectorized:
; Line 225
	movups	xmm0, XMMWORD PTR [rcx-32]
	lea	rax, QWORD PTR [rcx+r8]
	movups	xmm1, XMMWORD PTR [rax+rdx-32]
	lea	rax, QWORD PTR [rcx+r8]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx-32], xmm1
	movups	xmm0, XMMWORD PTR [rcx-16]
	movups	xmm1, XMMWORD PTR [rax+rdx-16]
	lea	rax, QWORD PTR [r8+rcx]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx-16], xmm1
	movups	xmm0, XMMWORD PTR [rcx]
	movups	xmm1, XMMWORD PTR [rax+rdx]
	lea	rax, QWORD PTR [rcx+r8]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx], xmm1
	movups	xmm0, XMMWORD PTR [rcx+16]
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
	add	rcx, 64					; 00000040H
	sub	rdi, 1
	jne	SHORT $LL7@Vectorized
$LN36@Vectorized:
	lea	rcx, QWORD PTR [r11+2]
	mov	r8d, 36					; 00000024H
	sub	r8, r11
	lea	rcx, QWORD PTR [r10+rcx*4]
	mov	r9, r10
	shr	r8, 2
	neg	r9
	inc	r8
	lea	r11, QWORD PTR [r11+r8*4]
	npad	7
$LL24@Vectorized:
	lea	rax, QWORD PTR [r9+rdx]
	movss	xmm0, DWORD PTR [rax+rcx-8]
	addss	xmm0, DWORD PTR [rcx-8]
	movss	DWORD PTR [rcx-8], xmm0
	movss	xmm1, DWORD PTR [rax+rcx-4]
	lea	rax, QWORD PTR [r9+rdx]
	addss	xmm1, DWORD PTR [rcx-4]
	movss	DWORD PTR [rcx-4], xmm1
	movss	xmm0, DWORD PTR [rax+rcx]
	lea	rax, QWORD PTR [r9+rdx]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm0, DWORD PTR [rax+rcx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rcx+4], xmm0
	add	rcx, 16
	sub	r8, 1
	jne	SHORT $LL24@Vectorized
; Line 223
	cmp	r11, 40					; 00000028H
	jge	SHORT $LN2@Vectorized
	mov	r8d, 40					; 00000028H
	lea	rcx, QWORD PTR [r10+r11*4]
	sub	r8, r11
$LC31@Vectorized:
; Line 225
	mov	rax, rdx
	sub	rax, r10
	movss	xmm0, DWORD PTR [rax+rcx]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rcx], xmm0
	add	rcx, 4
	sub	r8, 1
	jne	SHORT $LC31@Vectorized
$LN2@Vectorized:
; Line 221
	add	rbx, 8
	sub	rsi, 1
	jne	$LL4@Vectorized
	mov	rdi, QWORD PTR [rsp+16]
$LN3@Vectorized:
; Line 228
	mov	rbx, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+32]
	pop	r14
	ret	0
?VectorizedAdd@@YAXHHPEAPEAM0@Z ENDP			; VectorizedAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?NonVectorizedAdd@@YAXHHPEAPEAM0@Z
_TEXT	SEGMENT
x_matrix$dead$ = 8
y_matrix$dead$ = 16
matrixToAdd$ = 24
result$ = 32
?NonVectorizedAdd@@YAXHHPEAPEAM0@Z PROC			; NonVectorizedAdd, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 232
	movsxd	rdx, DWORD PTR ?x_matrix2@@3HA		; x_matrix2
	test	rdx, rdx
	jle	$LN3@NonVectori
	sub	r8, r9
	npad	13
$LL4@NonVectori:
; Line 237
	mov	rcx, QWORD PTR [r9]
	mov	rax, QWORD PTR [r8+r9]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rcx+8], xmm0
	movss	xmm1, DWORD PTR [rax+12]
	addss	xmm1, DWORD PTR [rcx+12]
	movss	DWORD PTR [rcx+12], xmm1
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+16]
	movss	DWORD PTR [rcx+16], xmm0
	movss	xmm1, DWORD PTR [rax+20]
	addss	xmm1, DWORD PTR [rcx+20]
	movss	DWORD PTR [rcx+20], xmm1
	movss	xmm0, DWORD PTR [rax+24]
	addss	xmm0, DWORD PTR [rcx+24]
	movss	DWORD PTR [rcx+24], xmm0
	movss	xmm1, DWORD PTR [rax+28]
	addss	xmm1, DWORD PTR [rcx+28]
	movss	DWORD PTR [rcx+28], xmm1
	movss	xmm0, DWORD PTR [rax+32]
	addss	xmm0, DWORD PTR [rcx+32]
	movss	DWORD PTR [rcx+32], xmm0
	movss	xmm1, DWORD PTR [rax+36]
	addss	xmm1, DWORD PTR [rcx+36]
	movss	DWORD PTR [rcx+36], xmm1
	movss	xmm0, DWORD PTR [rax+40]
	addss	xmm0, DWORD PTR [rcx+40]
	movss	DWORD PTR [rcx+40], xmm0
	movss	xmm1, DWORD PTR [rax+44]
	addss	xmm1, DWORD PTR [rcx+44]
	movss	DWORD PTR [rcx+44], xmm1
	movss	xmm0, DWORD PTR [rax+48]
	addss	xmm0, DWORD PTR [rcx+48]
	movss	DWORD PTR [rcx+48], xmm0
	movss	xmm1, DWORD PTR [rax+52]
	addss	xmm1, DWORD PTR [rcx+52]
	movss	DWORD PTR [rcx+52], xmm1
	movss	xmm0, DWORD PTR [rax+56]
	addss	xmm0, DWORD PTR [rcx+56]
	movss	DWORD PTR [rcx+56], xmm0
	movss	xmm1, DWORD PTR [rax+60]
	addss	xmm1, DWORD PTR [rcx+60]
	movss	DWORD PTR [rcx+60], xmm1
	movss	xmm0, DWORD PTR [rax+64]
	addss	xmm0, DWORD PTR [rcx+64]
	movss	DWORD PTR [rcx+64], xmm0
	movss	xmm1, DWORD PTR [rax+68]
	addss	xmm1, DWORD PTR [rcx+68]
	movss	DWORD PTR [rcx+68], xmm1
	movss	xmm0, DWORD PTR [rax+72]
	addss	xmm0, DWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+72], xmm0
	movss	xmm1, DWORD PTR [rax+76]
	addss	xmm1, DWORD PTR [rcx+76]
	movss	DWORD PTR [rcx+76], xmm1
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR [rcx+80]
	movss	DWORD PTR [rcx+80], xmm0
	movss	xmm1, DWORD PTR [rax+84]
	addss	xmm1, DWORD PTR [rcx+84]
	movss	DWORD PTR [rcx+84], xmm1
	movss	xmm0, DWORD PTR [rax+88]
	addss	xmm0, DWORD PTR [rcx+88]
	movss	DWORD PTR [rcx+88], xmm0
	movss	xmm1, DWORD PTR [rax+92]
	addss	xmm1, DWORD PTR [rcx+92]
	movss	DWORD PTR [rcx+92], xmm1
	movss	xmm0, DWORD PTR [rax+96]
	addss	xmm0, DWORD PTR [rcx+96]
	movss	DWORD PTR [rcx+96], xmm0
	movss	xmm1, DWORD PTR [rax+100]
	addss	xmm1, DWORD PTR [rcx+100]
	movss	DWORD PTR [rcx+100], xmm1
	movss	xmm0, DWORD PTR [rax+104]
	addss	xmm0, DWORD PTR [rcx+104]
	add	r9, 8
	movss	DWORD PTR [rcx+104], xmm0
	movss	xmm1, DWORD PTR [rax+108]
	addss	xmm1, DWORD PTR [rcx+108]
	movss	DWORD PTR [rcx+108], xmm1
	movss	xmm0, DWORD PTR [rax+112]
	addss	xmm0, DWORD PTR [rcx+112]
	movss	DWORD PTR [rcx+112], xmm0
	movss	xmm1, DWORD PTR [rax+116]
	addss	xmm1, DWORD PTR [rcx+116]
	movss	DWORD PTR [rcx+116], xmm1
	movss	xmm0, DWORD PTR [rax+120]
	addss	xmm0, DWORD PTR [rcx+120]
	movss	DWORD PTR [rcx+120], xmm0
	movss	xmm1, DWORD PTR [rax+124]
	addss	xmm1, DWORD PTR [rcx+124]
	movss	DWORD PTR [rcx+124], xmm1
	movss	xmm0, DWORD PTR [rax+128]
	addss	xmm0, DWORD PTR [rcx+128]
	movss	DWORD PTR [rcx+128], xmm0
	movss	xmm1, DWORD PTR [rax+132]
	addss	xmm1, DWORD PTR [rcx+132]
	movss	DWORD PTR [rcx+132], xmm1
	movss	xmm0, DWORD PTR [rax+136]
	addss	xmm0, DWORD PTR [rcx+136]
	movss	DWORD PTR [rcx+136], xmm0
	movss	xmm1, DWORD PTR [rax+140]
	addss	xmm1, DWORD PTR [rcx+140]
	movss	DWORD PTR [rcx+140], xmm1
	movss	xmm0, DWORD PTR [rax+144]
	addss	xmm0, DWORD PTR [rcx+144]
	movss	DWORD PTR [rcx+144], xmm0
	movss	xmm1, DWORD PTR [rax+148]
	addss	xmm1, DWORD PTR [rcx+148]
	movss	DWORD PTR [rcx+148], xmm1
	movss	xmm0, DWORD PTR [rax+152]
	addss	xmm0, DWORD PTR [rcx+152]
	movss	DWORD PTR [rcx+152], xmm0
	movss	xmm1, DWORD PTR [rax+156]
	addss	xmm1, DWORD PTR [rcx+156]
	movss	DWORD PTR [rcx+156], xmm1
	sub	rdx, 1
	jne	$LL4@NonVectori
$LN3@NonVectori:
; Line 240
	ret	0
?NonVectorizedAdd@@YAXHHPEAPEAM0@Z ENDP			; NonVectorizedAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z
_TEXT	SEGMENT
matrix$ = 8
x_matrix$ = 16
y_matrix$ = 24
?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z PROC			; FillMatrix, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 261
$LN34:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
; Line 262
	xor	r9d, r9d
; Line 269
	movsxd	r10, edx
	mov	rbx, rcx
	movsxd	r11, r8d
	lea	edi, QWORD PTR [r9+10]
	npad	6
$LL4@FillMatrix:
; Line 265
	xor	r8d, r8d
$LL7@FillMatrix:
; Line 267
	xor	edx, edx
	test	r11, r11
	jle	SHORT $LN5@FillMatrix
	npad	6
$LL10@FillMatrix:
; Line 269
	test	r10, r10
	jle	SHORT $LN8@FillMatrix
; Line 271
	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [r8+rax]
	mov	rax, QWORD PTR [rcx+rdx*8]
	mov	rcx, r10
	npad	13
$LL23@FillMatrix:
; Line 269
	movd	xmm0, r9d
	lea	rax, QWORD PTR [rax+4]
; Line 271
	cvtdq2ps xmm0, xmm0
	inc	r9d
	movss	DWORD PTR [rax-4], xmm0
	sub	rcx, 1
	jne	SHORT $LL23@FillMatrix
$LN8@FillMatrix:
; Line 267
	inc	rdx
	cmp	rdx, r11
	jl	SHORT $LL10@FillMatrix
$LN5@FillMatrix:
; Line 265
	add	r8, 8
	cmp	r8, 80					; 00000050H
	jl	SHORT $LL7@FillMatrix
; Line 263
	add	rbx, 8
	sub	rdi, 1
	jne	SHORT $LL4@FillMatrix
; Line 276
	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?FillMatrix@@YAXPEAPEAPEAPEAMHH@Z ENDP			; FillMatrix
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z
_TEXT	SEGMENT
matrix$ = 64
x_matrix$dead$ = 72
y_matrix$dead$ = 80
?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z PROC			; ClearMatrix, COMDAT
; File C:\Users\Artem\Desktop\AWP1\AWP1.cpp
; Line 279
$LN32:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	movsxd	rdi, DWORD PTR ?x_result@@3HA		; x_result
	mov	r14, rcx
; Line 284
	movsxd	rbp, DWORD PTR ?y_result@@3HA		; y_result
	mov	r15d, 10
	npad	1
$LL4@ClearMatri:
; Line 282
	xor	esi, esi
$LL7@ClearMatri:
; Line 284
	xor	ebx, ebx
	test	rbp, rbp
	jle	SHORT $LN5@ClearMatri
	npad	7
$LL10@ClearMatri:
; Line 286
	test	edi, edi
	jle	SHORT $LN8@ClearMatri
	mov	rax, QWORD PTR [r14]
	mov	r8, rdi
	shl	r8, 2
	xor	edx, edx
	mov	rcx, QWORD PTR [rax+rsi]
	mov	rcx, QWORD PTR [rcx+rbx*8]
	call	memset
$LN8@ClearMatri:
; Line 284
	inc	rbx
	cmp	rbx, rbp
	jl	SHORT $LL10@ClearMatri
$LN5@ClearMatri:
; Line 282
	add	rsi, 8
	cmp	rsi, 80					; 00000050H
	jl	SHORT $LL7@ClearMatri
; Line 280
	add	r14, 8
	sub	r15, 1
	jne	SHORT $LL4@ClearMatri
; Line 293
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?ClearMatrix@@YAXPEAPEAPEAPEAMHH@Z ENDP			; ClearMatrix
_TEXT	ENDS
END
